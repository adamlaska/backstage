/*
 * Copyright 2025 The Backstage Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// ******************************************************************
// * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. *
// ******************************************************************
import { DiscoveryApi } from '../types/discovery';
import { FetchApi } from '../types/fetch';
import crossFetch from 'cross-fetch';
import { pluginId } from '../pluginId';
import * as parser from 'uri-template';
import { Build } from '../models/Build.model';

/**
 * Wraps the Response type to convey a type on the json call.
 *
 * @public
 */
export type TypedResponse<T> = Omit<Response, 'json'> & {
  json: () => Promise<T>;
};

/**
 * Options you can pass into a request for additional information.
 *
 * @public
 */
export interface RequestOptions {
  token?: string;
}
/**
 * @public
 */
export type BuildIdGet = {
  path: {
    buildId: string;
  };
  query: {
    entityRef: string;
  };
};
/**
 * @public
 */
export type BuildIdLogsGet = {
  path: {
    buildId: string;
  };
  query: {
    entityRef: string;
  };
};
/**
 * @public
 */
export type BuildIdRetriggerPost = {
  path: {
    buildId: string;
  };
  query: {
    entityRef: string;
  };
};
/**
 * @public
 */
export type RootGet = {
  query: {
    entityRef: string;
  };
};

/**
 * @public
 */
export class DefaultApiClient {
  private readonly discoveryApi: DiscoveryApi;
  private readonly fetchApi: FetchApi;

  constructor(options: {
    discoveryApi: { getBaseUrl(pluginId: string): Promise<string> };
    fetchApi?: { fetch: typeof fetch };
  }) {
    this.discoveryApi = options.discoveryApi;
    this.fetchApi = options.fetchApi || { fetch: crossFetch };
  }

  /**
   * Get build details
   * @param buildId - Build ID
   * @param entityRef - Entity reference (kind:namespace/name)
   */
  public async buildIdGet(
    // @ts-ignore
    request: BuildIdGet,
    options?: RequestOptions,
  ): Promise<TypedResponse<Build>> {
    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

    const uriTemplate = `/{buildId}{?entityRef}`;

    const uri = parser.parse(uriTemplate).expand({
      buildId: request.path.buildId,
      ...request.query,
    });

    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
      headers: {
        'Content-Type': 'application/json',
        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
      },
      method: 'GET',
    });
  }

  /**
   * Stream build logs
   * @param buildId - Build ID
   * @param entityRef - Entity reference (kind:namespace/name)
   */
  public async buildIdLogsGet(
    // @ts-ignore
    request: BuildIdLogsGet,
    options?: RequestOptions,
  ): Promise<TypedResponse<string>> {
    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

    const uriTemplate = `/{buildId}/logs{?entityRef}`;

    const uri = parser.parse(uriTemplate).expand({
      buildId: request.path.buildId,
      ...request.query,
    });

    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
      headers: {
        'Content-Type': 'application/json',
        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
      },
      method: 'GET',
    });
  }

  /**
   * Retrigger a build
   * @param buildId - Build ID
   * @param entityRef - Entity reference (kind:namespace/name)
   */
  public async buildIdRetriggerPost(
    // @ts-ignore
    request: BuildIdRetriggerPost,
    options?: RequestOptions,
  ): Promise<TypedResponse<Build>> {
    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

    const uriTemplate = `/{buildId}/retrigger{?entityRef}`;

    const uri = parser.parse(uriTemplate).expand({
      buildId: request.path.buildId,
      ...request.query,
    });

    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
      headers: {
        'Content-Type': 'application/json',
        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
      },
      method: 'POST',
    });
  }

  /**
   * List builds for an entity
   * @param entityRef - Entity reference (kind:namespace/name)
   */
  public async rootGet(
    // @ts-ignore
    request: RootGet,
    options?: RequestOptions,
  ): Promise<TypedResponse<Array<Build>>> {
    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

    const uriTemplate = `/{?entityRef}`;

    const uri = parser.parse(uriTemplate).expand({
      ...request.query,
    });

    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
      headers: {
        'Content-Type': 'application/json',
        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
      },
      method: 'GET',
    });
  }
}
